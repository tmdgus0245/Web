    정적 컨텐츠: html 파일을 변함없이 그냥 보여주는 것
    MVC와 템플릿 엔진: html 파일을 서버에서 조금 변형을 시켜 보여주는 것
    API: 안드로이드나 아이폰 클라이언트랑 개발을 해야할 경우 서버입장에서는 json 포맷으로 데이터를 전달 (서버끼리 통신할 때, vue, react)

-Static Content
    정적 컨텐츠 요청이 내장 톰켓 서버로 들어오고 스프링한테 넘김 스프링은 관련 컨트롤러를 먼저 찾아보고 static에서 찾아봄 찾은 html파일을 반환

-MVC and TemplateEngine
MVC와 템플릿 엔진: Model, View, Controller
View는 화면과 관련된 일만 Controller가 비즈니스 로직과 관련된 처리를 하여 View가 필요로 하는 것들을 Model에 넘겨줌
템플릿 엔진으로 html을 좀 더 프로그래밍해서 랜더링하여 랜더링 된 html을 고객에게 보여준다.

<p th:text="'hello ' + ${name}">hello! empty</p>
thymeleaf를 이용하면 서버를 통해 html을 열어보지 않아도 html을 열었을 때 hello! empty 부분이 출력됨 서버를 통해 열었을 시 th:~~ 로 치환

-API
@GetMapping("hello-string")
@ResponseBody
public String helloString(@RequestParam("name") String name) {
    return "hello " + name;
}
원래 @ResponseBody 어노테이션 없이 요청이 들어오면 view 리졸버한테 맞는 템플릿을 찾아줘 요청을 하는데 이런식으로 @ResponseBody 어노테이션을 달면 Controller에서 바로 name 값을 받아 객체를 만들어 HttpMessageConverter에게 전달하고 받은 객체가 문자면 StringConverter 객체면 JsonConverter가 동작하여 객체를 html형식이 아닌채로 출력 가능
스프링은 기본적으로 객체를 반환할 때 json형식으로 반환

API는 html형식 없이 HttpMessageConverter를 통해 형식을 바꿔 전달하는 것, view 이런 것 없이 그냥 바로 Http 리스폰스에 이 값을 넣어서 반환해주는 것